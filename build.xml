<?xml version="1.0"?>

<!--
	Build file for Objectify.
-->

<project name="objectify" default="jar" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<property name="name" value="${ant.project.name}" />
	
	<property file="user.properties" />
	<property file="${user.home}/build.properties" />
	<property file="build.properties" />
	<property file="edit-this-to-build.properties" />

	<property name="build.debug" value="on" />
	<property name="build.deprecation" value="on" />

	<property name="ant.build.javac.target" value="1.6" />
	<property name="ant.build.javac.source" value="1.6" />

	<property name="build.dir" location="target" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.super.dir" location="${build.dir}/super" />
	<property name="build.javadoc.dir" location="${build.dir}/javadoc" />
	<property name="build.extract.dir" location="${build.dir}/extract" />

	<property name="docs.dir" value="${build.dir}/docs" />
	<property name="javadoc.dir" value="javadoc" />

	<property name="super.package" value="com/googlecode/objectify/impl/emul"/>

	<property name="googlecode.projectname" value="objectify-appengine"/>

	<property name="lib.dir" location="lib" />
	<property name="src.dir" location="src" />
	<property name="super.src.dir" location="super" />
	
	<patternset id="sdk.client.files">
		<!-- Datastore data classes -->
		<include name="com/google/appengine/api/datastore/AppIdNamespace.class"/>
		<include name="com/google/appengine/api/datastore/Blob.class"/>
		<include name="com/google/appengine/api/datastore/Category.class"/>
		<include name="com/google/appengine/api/datastore/Cursor.class"/>
		<include name="com/google/appengine/api/datastore/DataTypeUtils.class"/>
		<include name="com/google/appengine/api/datastore/Email.class"/>
		<include name="com/google/appengine/api/datastore/EntityNotFoundException.class"/>
		<include name="com/google/appengine/api/datastore/GeoPt.class"/>
		<include name="com/google/appengine/api/datastore/IMHandle.class"/>
		<include name="com/google/appengine/api/datastore/Key.class"/>
		<include name="com/google/appengine/api/datastore/KeyFactory.class"/>
		<include name="com/google/appengine/api/datastore/Link.class"/>
		<include name="com/google/appengine/api/datastore/PhoneNumber.class"/>
		<include name="com/google/appengine/api/datastore/PostalAddress.class"/>
		<include name="com/google/appengine/api/datastore/Rating.class"/>
		<include name="com/google/appengine/api/datastore/ShortBlob.class"/>
		<include name="com/google/appengine/api/datastore/Text.class"/>
		<include name="com/google/appengine/api/users/User.class"/>
		
		<!-- JPA Annotations we use -->
		<include name="javax/persistence/Entity.class"/>
		<include name="javax/persistence/Id.class"/>
		<include name="javax/persistence/Embedded.class"/>
		<include name="javax/persistence/PostLoad.class"/>
		<include name="javax/persistence/PrePersist.class"/>
		<include name="javax/persistence/Transient.class"/>
	</patternset>
	
	<patternset id="objectify.client.files">
		<include name="com/googlecode/objectify/Key.class"/>
		<include name="com/googlecode/objectify/KeyRange.class"/>
		<include name="com/googlecode/objectify/NotFoundException.class"/>
		<include name="com/googlecode/objectify/annotation/**/*.class"/>
	</patternset>

	<!-- Used for building as well as for extracting sdk client files -->
	<path id="sdk.classpath">
		<fileset dir="${gae.sdk.dir}/lib">
			<include name="user/appengine-api-1.0-sdk-*.jar" />
			<include name="user/appengine-api-labs-*.jar" />
			<include name="user/orm/geronimo-jpa_3.0_spec-*.jar" />
			<include name="testing/appengine-testing.jar" />
			<include name="impl/**/*.jar" />
		</fileset>
	</path>
	
	<!-- Used for building -->
	<path id="master.classpath">		
		<path refid="sdk.classpath" />
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Used for running unit tests via ant -->
	<path id="run.classpath">
		<pathelement location="${build.classes.dir}" />
		<path refid="master.classpath" />
	</path>

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="master.classpath"/>
	<taskdef resource="com/googlecode/svntask/svntask.xml" classpathref="master.classpath"/>

	<target name="init">
		<tstamp>
			<format property="YEAR" pattern="yyyy" />
		</tstamp>

        <svn><info path="${basedir}" revisionProperty="revisionVersion" /></svn>
        <property name="build.version" value="${revisionVersion}" />
	</target>


	<target name="clean">
		<delete dir="${build.dir}" />
	</target>
	
 	<target name="classes" depends="init">
		<mkdir dir="${build.classes.dir}" />
 		
		<javac srcdir="${src.dir}"
				destdir="${build.classes.dir}"
				debug="${build.debug}"
				deprecation="${build.deprecation}"
			>
			<classpath refid="master.classpath" />
		</javac>

		<mkdir dir="${build.super.dir}" />

		<javac srcdir="${super.src.dir}"
				destdir="${build.super.dir}"
				debug="${build.debug}"
				deprecation="${build.deprecation}"
			>
		</javac>
	</target>

	<target name="jar" depends="classes">
		<property name="build.jar.file" location="${build.dir}/${name}-${build.version}.jar" />
		<property name="build.sources.file" location="${build.dir}/${name}-${build.version}-src.zip" />

		<jar destfile="${build.jar.file}">
			<manifest>
				<attribute name="Specification-Version" value="${build.version}" />
				<attribute name="Implementation-Version" value="${TODAY}" />
			</manifest>
			
			<fileset dir="${build.classes.dir}">
				<exclude name="**/test/**"/>
			</fileset>
			<fileset dir="${src.dir}">
				<include name="**/*.gwt.xml"/>
				<include name="**/Key.java"/>
			</fileset>

			<zipfileset dir="${super.src.dir}" prefix="${super.package}">
				<include name="**/*.java"/>
			</zipfileset>
			<zipfileset dir="${src.dir}" prefix="${super.package}">
				<include name="**/*_CustomFieldSerializer.java"/>
			</zipfileset>
		</jar>

		<jar zipfile="${build.sources.file}">
			<fileset dir="${src.dir}" includes="**/*.java"/>
		</jar>
	</target>

	<target name="client-jar" depends="classes">
		<property name="build.client-jar.file" location="${build.dir}/${name}-client-${build.version}.jar" />

		<unjar dest="${build.extract.dir}">
			<patternset refid="sdk.client.files"/>
			<path refid="sdk.classpath" />
		</unjar>
		
		<jar destfile="${build.client-jar.file}">
			<manifest>
				<attribute name="Specification-Version" value="${build.version}" />
				<attribute name="Implementation-Version" value="${TODAY}" />
			</manifest>
			
			<fileset dir="${build.classes.dir}">
				<patternset refid="objectify.client.files"/>
			</fileset>
			<fileset dir="${build.extract.dir}"/>
		</jar>
	</target>

	<target name="init-version">
		<input addproperty="build.version" message="Version number?" />
	</target>

	<target name="javadoc" depends="init-version, classes">
		<javadoc
			destdir="${build.javadoc.dir}"
			packagenames="*"
			classpathref="run.classpath"
			author="true"
			version="true"
			Windowtitle="Objectify-AppEngine Javadoc"
		>
			<fileset dir="${src.dir}">
				<include name="**/com/googlecode/objectify/**/*.java" />
				<exclude name="**/test/**" />
				<exclude name="**/*.xml" />
			</fileset>
			
			<doctitle><![CDATA[<h1>Objectify-AppEngine</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; ${YEAR} Jeff Schnitzer and a gang of pirates. All Rights Reserved. Build version: ${build.version}</i>]]></bottom>
		</javadoc>

		<sync todir="${javadoc.dir}" includeEmptyDirs="true">
			<fileset dir="${build.javadoc.dir}" />
			<preserveintarget>
				<include name="**/.svn/**"/>
			</preserveintarget>
		</sync>
	</target>
	
	<target name="test" depends="classes">
		<taskdef name="testng" classpathref="run.classpath" classname="org.testng.TestNGAntTask" />

		<testng classpathref="run.classpath" outputdir="${build.dir}/test-output">
			<classfileset dir="${build.classes.dir}" includes="**/test/*.class"/>
		</testng>
	</target>
	
	<target name="dist" depends="clean, init-version, jar, client-jar, build-docs, maven">
		<property name="build.dist.dir" location="${build.dir}/${ant.project.name}-${build.version}"/>
        <property name="build.dist.zip" location="${build.dir}/${ant.project.name}-${build.version}.zip"/>

		<copy todir="${build.dist.dir}">
	        <fileset dir=".">
	        	<include name="license.txt"/>
				<include name="src/**"/>
	        	<include name="javadoc/**"/>
	        	<include name="edit-this-to-build.properties"/>
	        </fileset>
        </copy>

		<copy todir="${build.dist.dir}">
            <fileset dir="${build.dir}">
        		<include name="docs/**" />
        		<include name="*.jar" />
            </fileset>
        </copy>

        <dirname property="build.dist.dir.dirname" file="${build.dist.dir}" />
        <basename property="build.dist.dir.basename" file="${build.dist.dir}" />

        <zip zipfile="${build.dist.zip}" basedir="${build.dist.dir.dirname}">
                <include name="${build.dist.dir.basename}/**" />
        </zip>

	</target>

	<target name="build-docs" description="downloads docs from wiki and processes them into the build/docs dir">
		<property name="wiki.baseurl" value="http://code.google.com/p/${googlecode.projectname}/wiki"/>
				
		<mkdir dir="${docs.dir}"/>
		
		<svn><ls repository="http://${googlecode.projectname}.googlecode.com/svn" path="wiki" filterType="file" filterContains=".wiki"/></svn>
		<propertyregex property="wiki.pages" input="${svn.ls}" regexp="\.wiki" replace=""/> 
		<echo message="Getting wiki pages: ${wiki.pages}"/>
		
		<!-- Get files from wiki-->
		<for list="${wiki.pages}" param="wiki.page" parallel="yes">
		  <sequential>
			<get dest="${docs.dir}/@{wiki.page}.html" src="${wiki.baseurl}/@{wiki.page}?show=content"/>
		  </sequential>
		</for>
		
		<!-- Replace links in files -->
		<for list="${wiki.pages}" param="wiki.page">
		  <sequential>
		  	<echo message="replacing /p/${googlecode.projectname}/wiki/@{wiki.page} with @{wiki.page}.html in ${docs.dir}"/>
			<replace dir="${docs.dir}" token="/p/${googlecode.projectname}/wiki/@{wiki.page}" value="@{wiki.page}.html"/>
		  </sequential>
		</for>
		
		<!-- link back to the wiki, if we haven't downloaded the content -->
		<replace dir="${docs.dir}" token="/p/${googlecode.projectname}/wiki" value="${wiki.baseurl}"/>
		
	</target>

	<target name="init-maven-repo" unless="maven.repo.dir">
		<if><available file="../maven" type="dir"/>
			<then>
				<property name="maven.repo.dir" location="../maven"/>
			</then>
			<else>
				<property name="maven.repo.dir" location="target/maven"/>
				<svn failonerror="true">
					<checkout
							url="https://objectify-appengine.googlecode.com/svn/maven"
							path="${maven.repo.dir}"
							depth="immediates"
							/>
					<!-- update sparsely until we get to our directory -->
					<update path="${maven.repo.dir}/com/googlecode" depth="immediates"/>
					<update path="${maven.repo.dir}/com/googlecode/objectify" depth="immediates"/>
				</svn>
			</else>
		</if>
	</target>

	<!--
	Using either "ant dist" or "ant maven" will deploy the maven artifacts to maven.repo.dir.
	If you don't set maven.repo.dir then ../maven is used if it exists, otherwise ./target/maven is used
	-->
	<target name="maven" depends="init-maven-repo, init-version, jar"
	        description="Checks out the maven repository, and deployes the jar artifact into it (but does not commit)"
	        unless="skip.maven">

		<svn failonerror="false">
			<update path="${maven.repo.dir}/com/googlecode/objectify/objectify" depth="files"/>
			<update path="${maven.repo.dir}/com/googlecode/objectify/objectify/${build.version}" depth="infinite"/>
		</svn>

		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="master.classpath" />

		<copy file="pom-template.xml" tofile="${build.dir}/pom.xml">
			<filterset>
				<filter token="BUILD.VERSION" value="${build.version}"/>
			</filterset>
		</copy>

		<artifact:pom file="${build.dir}/pom.xml" id="objectify-pom"/>
		<artifact:deploy file="${build.jar.file}">
			<pom refid="objectify-pom"/>
			<remoterepository url="file://${maven.repo.dir}"/>
			<attach file="${build.sources.file}" classifier="sources"/>
		</artifact:deploy>

		<svn><add path="${maven.repo.dir}/com/googlecode/objectify/objectify"/></svn>
		<echo>NB: please commit maven repository in ${maven.repo.dir}</echo>
	</target>

</project>
